---
title: "LaTeX 101 - An Introduction"
subtitle: "Research Bazar (ResBaz) 2023"
author: "Victor Gambarini, (Jens Brinkmann)"
institute: "The University of Auckland"
date: today
# bibliography: refs.bib
from: markdown+emoji
# embed-resources: false
format:
  revealjs:
    
    theme: robot-lung2.scss
    # css: ./logo.css
    # disableLayout: true
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    transition: convex
    width: 1600
    height: 900
    margin: 0.2
    # background-image: ./ResBaz_transparent_Logo_cropped.svg
    # background-opacity: 0.5
    # background-position: bottom 10px right 20px
    # background-size: contain
    # data-background-repeat: no-repeat
    # background-size: 80px
    # background-repeat: no-repeat
    # background-position: 0% 100%
    # logo: ResBaz_transparent_cropped.svg
    # self_contained: false
    reveal_plugins: ["menu"]
    reveal_options:
      menu:
        numbers: true
    header: ResBaz 2023 | Victor Gambarini | LaTeX 101
    header-logo: ResBaz_transparent_cropped.svg
    filters:
      - reveal-header
--- 

# test slide for $\LaTeX$ code
```{[latex]}
\preamble{anc}
\textbf{bold text}
normal text

*text in italics*
```

# Some useful $\LaTeX$ commmands
```{[latex]}

see my intro text file
- cite
- comment
- references
- figures
- tables
- ...

```
# What is $\LaTeX$ pip install nbformat nbclient
- Pronounciation: /Ààl…ëÀêt…õk/ or /Ààle…™t…õk/ 
- $\LaTeX$ is a typesetting system and has been around for almost 40 years (since 1984)
- While seeming quite nerdy, (rather) recent ways of interacting with it make it more user-friendly and approchable
- Think of it as **doing some programming to get some neat pdf output**, many editors require compiling (press a button and wait)


The name TeX is intended by its developer to be $\tau \epsilon \chi$, TeX is an abbreviation of œÑŒ≠œáŒΩŒ∑ (Œ§ŒïŒßŒùŒó technƒì), Greek for both "art" and "craft", which is also the root word of technical.

# What is so special about $\LaTeX$
- It separates content from formatting, letting you focus on writing and fiddling ü•∏ 
- Cross-platform compatibility
- There is a wide community and often several ways to get things done. It is rare that you are the first to ask a question. 
- Most of the (good) books, journal articles, etc. are created using $\LaTeX$ 
- At this year's ResBaz, we have two more advanced sessions LINK A LINK B run by Eirian. She is a $\LaTeX$ **superstar**. Think of our current session the foundation.

# Showing off how cool it is
[Focused ion beam system](https://www.overleaf.com/project/64239dbbe3b2710222c48e26)
Author: Clemens Helfmeier
[spherical and cartesian grids](https://texample.net/tikz/examples/spherical-and-cartesian-grids/) 
[spherical and cartesian grids on overleaf](https://www.overleaf.com/project/64239faae3b2710222c4ccbe)

Video Snippet: Change from 2 column to one column, remove the draft text, start hand-writing a complicated math equation and then get it into $\LaTeX$, 

TikZ for [network visalisation](https://tikz.net/wp-content/uploads/2021/12/neural_networks-001.png) (vs. think about drawing/highlighting lines by hand/wysiwyg) 

Change some csv downloaded from somewhere and get it to update

Get from one design to another. Maybe even a Beamer presentation, but that's not really applicable. 

Workflow for changing things in citations (Zotero) or getting a citation from a paper (three steps and done), backed up to GitHub, don't worry

Update a picture to the latest version, keep the name, don't worry about overwriting, because you have it on GitHub

Because of [LaTeXIt](https://www.chachatelier.fr/latexit/) knowing the syntax can help you with creating vis. for your PowerPoint, Slides, ... Presentation

[Syntax highlighting for code](https://github.com/olivierverdier/python-latex-highlighting)

Change a caption on several figures, update the ToC,...


## Advantages

:::{.callout-note}
There is a trade-off between time invested upfront (learning $\LaTeX$ etc. vs. and time saved in the long-run. As many of you might work on their PhD thesises, this time balance one day before the deadline vs. some hours or days can't be traded-off 1:1
:::

- (good) $\LaTeX$ output **looks epic** (at least in most cases)
  - it decides where pictures are placed
  - maths is neatly rendered
  - how line-breaks happen (justify text is using a dictionary for line-breaks, unlike many [wysiwyg](https://en.wikipedia.org/wiki/WYSIWYG) editors)
  - multi-column layouts on one page

## Advantages - continued
- it is free and not tied to any big corporation, you can often write in any text editor, browser etc. 
- it is no closed source file (unlike a *.docx* or so) this means we can use Git(Hub) EXAMPLE and other version control systems (we can run things like a `diff` on it, EXAMPLE CODE GOES HERE)
  - no proprietary software that 
    - might disappear from the market
    - charges you an arm and a leg especially over time with a subscription model (yes, I am looking at you, Adobe) 
    - means you can keep this compeltely offline/local/no-cloud, etc. good for Ethics Approvals and sensitive data, ...
- you can mostly get outputs to several outputs with altering a few lines (vs. clicking on every slide or here and there)

## Advantages - continued
- you can customise it heavily
- you can have inline comments (for future you, for your supervisor, to toggle things on/off)
- If you ingest some code, tables, data, a lot of figures [ResBaz Workshop Python for image manipulation and repeatable research pipelines](), you will learn to love $\LaTeX$ 
- Referencing is quite easy, especially if paired with a reference manager such as Zotero, see ResBaz session [Managing References With Zotero](link)
- Maths!  $f_{c}=z^{2}+c$ AND [Mathpix Snipping](https://mathpix.com/)
- Plotting (again some learning curve, but no Excel to Word to something schenanigans where you might miss out the latest version of a file and try to publish something wrong)
- same goes for citations, referencing figures, placing figures (yes, you can specify that it shall be right there where you want it, but you can also let $\LaTeX$ work it's magic)
- Portability: LaTeX documents are portable and can be easily converted to other formats, such as PDF, HTML, or EPUB.

## Disadvantages
- it takes time to learn (Overleaf and other more relevant UI etc. make it easier)
- it can be very fiddely (if you want specifics with tables, or placing images)
- the collaboration features are quite limited out of the box, yes, a lot can be done (see Eirian), but that mostly requires you to a) bring/acquire some coding knowledge, b) invest time; here, MS Word Clearly wins
- plugins such as Grammarly don't work ootb, for VSCode, you can integrate these as an Extension, on Overleaf there is a [buggy workaround](https://www.overleaf.com/learn/how-to/Use_Grammarly_with_Overleaf)


# Alternatives
- the ususal suspects: Microsoft Word, Google Doc, Libre/Open/... Office
  - these are wysiwyg (what you see is what you get)/gui-based, point, click, change. 
  - their benefits are usually that many not-so-techy people use them and can colleaborate
  - some things are quite efficient (Tables, for examples, but we'll provide you with some neat workarounds) especially the tracking of changes in MSWord and placing images. Yes, if you want to mock up a layout point-and-click it usually a lot quicker




# How does creating a document in $\LaTeX$ work?
- here some text

## Preamble
- here go some lines

## Main body
- here go some lines

## includes vs. something
- here go some lines

# How to get $\LaTeX$
- There are various options.
- The following (non-exhaustive) list goes from minimalistic (bare-bones) to specific environments either executed locally on your machine or *in the cloud.*

## How to get $\LaTeX$ - the core
Idea: As software-agnostic as possible
- Download a $\LaTeX$ distribution, for example [MiKTeX](https://miktex.org/download)
- install [pandoc](https://pandoc.org/installing.html)
- use any texteditor 
  - **Windows:** 
    - Notepad
  - **Mac:** 
    - TextEdit
  - **Linux:**
    - various
  - **Cross-Platform:** 
    - [VSCode](https://code.visualstudio.com/)
    - [Sublime](https://www.sublimetext.com/download) 
- on the commandline: type `pandoc -i ~/Desktop/myWritings.tex -o ~/Desktop/MyRenderedLaTeX.pdf`
- inspect your neatly renedered document

## How to get $\LaTeX$ - special editors
The idea is to have a local installation and a specialised editor
- [Texifier](https://www.texifier.com/)
- [TeXLive](https://www.tug.org/texlive/)
- [TeXStudio](https://www.texstudio.org/)
- [TeXMaker](https://www.xm1math.net/texmaker/)

## How to get $\LaTeX$ - In the browser
- [Overleaf](https://www.overleaf.com/) is quote famous for *bringing $\LaTeX to the masses*
- A pro and con at the same time: It runs in the cloud, you don't need to install a $\LaTeX$ distribution, special editor, etc.
- Recently, they added "Overleaf On-Premises" to circumvent privacy challenges
- there is a **free plan** which might be a good fit for beginners or if it is just you wokring on a dcument
- there are **paid plans**, including **student** plans which are currently NZD109/year
  - The main advantages: 
    - Invite collaborators, so work on the same document at the same time
    - Have a similar tracking mechanism as MS Word's *Track Changes*
    - Sync to Dropbox, GitHub, etc.
ALTERNATVIELY: There is another ResBaz session: [Stop Paying for Free Software](https://resbaz.auckland.ac.nz/schedule/#session-082)

## How to get $\LaTeX$ - The *meta* version
[Quarto](https://quarto.org/) can be considered *one level above* in terms of abstraction ![text](rstudio-qmd-how-it-works.png)

- $\LaTeX$ is just one of its output, the other benefit is a direct integration with **Python, R, Julia, Observable**
- you can write in  [markdown syntax](https://quarto.org/docs/authoring/markdown-basics.html)  (.md) so for example `**my text**` (md notation) as oppsed to `\textbf{my text}`
- the integration with code means you won't have to copy-paste results back and forth
  - this point can't be stressed enough! You are so likely to forget updating a plot 
  - you also get reproducability, because it isn't just a screen shot that is integrated into your document
  <!-- (There are approaches where you can get some (rudimentary) Python code into LaTeX, even into Overleaf, but these are mainly for handling several files (batch processing) keeping track of Python version- Coding colaborators can contribute via a Git workflow
- Communicate results to non-coding collaborators using git (e.g., [GitHub](https://github.com/))

:::{.callout-tip}
# On a side-note
 This deck of slides (based on [RevealJS](https://revealjs.com/), it can also handle a lot of code. 
:::

# Example: How does a Thesis look?
MY POLISHED EXAMPLE
big points:
- preamble (like in coding where you load your libraries, define your colours and other settings, define what output you want (A3 or A4, one or two columns, ... and if you don't manually *tweak it*, you can be pretty sure that you will get a neat layout even by switching between single and multi columns just by changing a few digits))

# Trying to make your $\LaTeX$ journey easier
- Template
  - not just to get the design
  - also to see how things are done
  - there are a few temaples of [Overleaf by the UoA](https://www.overleaf.com/edu/aucklanduni#templates)
- input pdf without the file path and name which it does by default, or with the file name if wanted
- toggle draft vs. not draft
- [TablesGenerator](https://www.tablesgenerator.com/) and or [LaTeXTables](https://www.latex-tables.com/)
- [Mathpix Snip](https://mathpix.com/)
- [LaTeXIt](https://www.chachatelier.fr/latexit/latexit-downloads.php?lang=en) (to quickly create equations)
- If not wanting Quarto, ingesting Markdown and using Pandoc to create LaTeX or DocX (to give to your non-techy colleague, ...)

# Include something else
The standard tools to insert a LATEX file into another are \input and \include.
input command
\input{filename} Use this command in the document body to insert the contents of another file named filename.tex; this file should not contain any LATEX preamble code (i.e. no \documentclass, \begin{document} or \end{document} ). LATEX won't start a new page before processing the material in filename.tex. \input allows you to nest \input commands, in files that are already being inputted by the root file.

include command
\include{filename} Use this command in the document body to insert the contents of another file named filename.tex;


# Pointers to other closely related sessions
- the two other $\LaTeX$ sessions
- Quarto
- Zotero and then https://retorque.re/zotero-better-bibtex/

Symbols are usually really easy
M\={a}ori 
Macrons [more advanced approach](https://jevonsnotes.wordpress.com/2013/03/22/maori-macrons-and-latex/) where you type MƒÅori (so on a Mac use the long-press option ƒÅ to write MƒÅori or change the keyboard style)


Displaystyle $$\sum_{n=1}^{\infty} \frac{1}{n}$$ vs $\sum_{n=1}^{\infty} \frac{1}{n}$










- Tables can be displayed using code: [tables in R markdown](https://rstudio.github.io/distill/tables.html); or [markdown](https://pandoc.org/MANUAL.html#tables).

- There are helpful ways of generating markdown tables online: [Markdown table generator](https://www.tablesgenerator.com/markdown_tables); and in [RStudio](https://rstudio.github.io/visual-markdown-editing/#editor-toolbar).

